@using ItsAllSemantics.Web.Models
@using ItsAllSemantics.Web.Components
@inject IJSRuntime JS
@inject ILogger<ChatWindow>? Log

<div id="chat-window" class="flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar">
    @if (Messages is { Count: > 0 })
    {
        @foreach (var message in Messages)
        {
            <ChatMessage Message="message" />
        }
    }
    else
    {
        <p class="text-slate-400 text-sm">No messages yet. Say hello!</p>
    }

    @if (IsStreaming)
    {
        <div class="flex items-start gap-3">
            <div
                class="w-10 h-10 rounded-full bg-gradient-to-br from-sky-500 to-indigo-600 flex items-center justify-center font-bold text-sm flex-shrink-0">
                AI</div>
            <div
                class="bg-white/10 backdrop-blur-md ring-1 ring-white/10 rounded-tl-none shadow-md p-3 rounded-lg max-w-lg">
                <p class="text-sm whitespace-pre-wrap">
                    @StreamingText
                    <span class="ias-caret"></span>
                </p>
                <p class="text-[10px] text-slate-400 mt-1">@DateTime.Now.ToString("t")</p>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public required List<ChatMessageModel> Messages { get; set; }

    [Parameter]
    public bool IsStreaming { get; set; }

    [Parameter]
    public string? StreamingText { get; set; }

    private int _lastMessageCount;
    private int _lastStreamingLength;
    private long _lastRenderTicks;
    private DateTime _lastScrollAt = DateTime.MinValue;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Avoid JS interop during prerender (first render). Run after hydration and when messages change.
        if (!firstRender)
        {
            var count = Messages?.Count ?? 0;
            var streamLen = IsStreaming ? (StreamingText?.Length ?? 0) : 0;
            if (count != _lastMessageCount || streamLen != _lastStreamingLength)
            {
                _lastMessageCount = count;
                _lastStreamingLength = streamLen;
                var now = System.Diagnostics.Stopwatch.GetTimestamp();
                var dt = (_lastRenderTicks == 0) ? 0 : (now - _lastRenderTicks) * 1000.0 / System.Diagnostics.Stopwatch.Frequency;
                Log?.LogDebug("[RENDER] ChatWindow scroll -> msgs={Msgs} streamLen={Len} dtSinceLastRender={DtMs:F1}ms", count,
                streamLen, dt);
                _lastRenderTicks = now;
                // Throttle scroll interop while streaming to avoid blocking render pipeline
                if (IsStreaming)
                {
                    if ((DateTime.UtcNow - _lastScrollAt) > TimeSpan.FromMilliseconds(100))
                    {
                        _lastScrollAt = DateTime.UtcNow;
                        _ = JS.InvokeVoidAsync("ias.scrollToBottom", "#chat-window");
                    }
                }
                else
                {
                    await JS.InvokeVoidAsync("ias.scrollToBottom", "#chat-window");
                }
            }
        }
    }
}
