@page "/"

<PageTitle>Home</PageTitle>

<section class="flex flex-col gap-4 h-[75vh]">
    <ChatWindow Messages="messages" />
    @if (isWaitingForResponse)
    {
        <div class="text-xs text-slate-400">AI is typing…</div>
    }
    <ChatInput OnSend="HandleSend" />
</section>

@code {
    private readonly List<ChatMessageModel> messages = [];
    private HubConnection? hubConnection;
    private bool isWaitingForResponse;
    private long typingTicket; // increments per send to invalidate old timeouts

    [Inject] private NavigationManager Nav { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var baseUri = Nav.BaseUri.TrimEnd('/');
        hubConnection = new HubConnectionBuilder()
        .WithUrl(new Uri(new Uri(baseUri + "/"), "hubs/chat"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<ChatMessageModel>("ReceiveMessage", (msg) =>
        {
            messages.Add(msg);
            // Hide typing indicator when any non-user message arrives (agent names may vary)
            if (!msg.IsUser) isWaitingForResponse = false;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        // Seed a friendly greeting
        messages.Add(new ChatMessageModel("Hello! I’m your AI assistant.", "ai", DateTimeOffset.Now));
    }

    private async Task HandleSend(string text)
    {
        if (hubConnection is null) return;

        // Mark waiting and start a safety timeout tied to this send
        var ticket = System.Threading.Interlocked.Increment(ref typingTicket);
        isWaitingForResponse = true;
        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(TimeSpan.FromSeconds(30));
                if (System.Threading.Volatile.Read(ref typingTicket) == ticket && isWaitingForResponse)
                {
                    isWaitingForResponse = false;
                    await InvokeAsync(StateHasChanged);
                }
            }
            catch { /* ignored */ }
        });

        try
        {
            await hubConnection.SendAsync("SendMessage", text);
        }
        catch
        {
            // If send fails, clear the indicator
            if (System.Threading.Volatile.Read(ref typingTicket) == ticket)
            {
                isWaitingForResponse = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }
}
